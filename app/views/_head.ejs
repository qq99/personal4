<head>
  <title>Anthony Cameron</title>
  <link href='/css/main.min.css' rel='stylesheet' type='text/css'>
  <link href='//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css' rel='stylesheet'>
  <meta content='width=device-width,initial-scale=1' name='viewport'>
  <meta content='Everything you need to know about Anthony Cameron: A collection of personal projects, featuring WebGL, GLSL shaders, JavaScript, C++.  A sample of my portfolio.  My resume.  My philosophy.' name='description'>
  <meta content='Anthony Cameron' name='author'>
  <meta charset='utf-8'>
  <!-- <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-26321085-1', 'auto');
    ga('send', 'pageview');

  </script> -->
  <script id="perlin.frag" type="x-shader/x-fragment">
      #ifdef GL_ES
      precision highp float;
      #endif

      varying vec2 vTextureCoord;

      uniform sampler2D uperm_sampler;
      uniform sampler2D igrad_sampler;
      uniform float time;
      uniform float resX;
      uniform float resY;

      float fade(in float t)
      {
          return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
      }
      float perm(in float x)
      {
          return texture2D(uperm_sampler, vec2(x / 256.0, 0)).r * 256.0;
      }
      float grad(in float x, in vec3 p)
      {
          return dot(texture2D(igrad_sampler, vec2(x,0)).rgb, p);
      }
      float lerp(in float a, in float b, in float c)
      {
          return mix(a,b,c);
      }
      float inoise(vec3 p)
      {
          vec3 P = mod(floor(p), 256.0);
          p -= floor(p);
          vec3 f = vec3(fade(p.x), fade(p.y), fade(p.z));
          float A = perm(P.x) + P.y;
          float AA = perm(A) + P.z;
          float AB = perm(A + 1.0) + P.z;
          float B =  perm(P.x + 1.0) + P.y;
          float BA = perm(B) + P.z;
          float BB = perm(B + 1.0) + P.z;


          return lerp(
              lerp(lerp(grad(perm(AA), p),
                  grad(perm(BA), p + vec3(-1.0, 0.0, 0.0)), f.x),
                  lerp(grad(perm(AB), p + vec3(0.0, -1.0, 0.0)),
                      grad(perm(BB), p + vec3(-1.0, -1.0, 0.0)), f.x), f.y),
              lerp(lerp(grad(perm(AA + 1.0), p + vec3(0.0, 0.0, -1.0)),
                      grad(perm(BA + 1.0), p + vec3(-1.0, 0.0, -1.0)), f.x),
              lerp(grad(perm(AB + 1.0), p + vec3(0.0, -1.0, -1.0)),
                  grad(perm(BB + 1.0), p + vec3(-1.0, -1.0, -1.0)), f.x), f.y),
          f.z);

      }

      float fbm(vec3 p){
        float f = 0.0;
        f += 0.5000*inoise(p); p*=2.02;
        f += 0.2500*inoise(p); p*=2.03;
        f += 0.1250*inoise(p); p*=2.01;
        f += 0.0625*inoise(p); p*=2.04;
        f /= 0.9375;
        return f;
      }

      void main(void) {
        float slowtime = 0.025 * time;
        vec2 q = gl_FragCoord.xy / vec2(resX,resY).xy;
        vec2 p = -1.0 + 2.0*q;
        p.x *= resX/resY;

        p /= 2.0; // effective zoom

        float u = p.x;
        float v = p.y;

        p.x -= 0.1;
        float r = sqrt( dot(p,p) );
        float a = atan( p.y, p.x );
        float noiseCoef = 0.1;
        for (float level = 1.0; level < 5.0; level ++)
        {
              noiseCoef = noiseCoef + (0.1 * level)
                  * abs(inoise(
                      vec3(level * u * 10.0,
                          level * v * 10.0,
                          time*0.75)));
        }

        float rednoise = 0.1;
        float xx = r;
        float yy = a;
        for (float level = 1.0; level < 5.0; level ++)
        {
              rednoise = rednoise + (0.078 * level)
                  * abs(inoise(
                      vec3(level * xx * 30.0,
                          level * yy * 10.0,
                          0.0)));
        }

        // calculate vein noise
        float veinnoise = 0.3;
        xx = r;
        yy = a;
        for (float level = 1.0; level < 3.0; level ++)
        {
              veinnoise = veinnoise + ((cos(time*0.25)*0.15 + 1.0) * 3.0 * level)
                  * abs(inoise(
                      vec3(level * xx * 15.0,
                          level * yy * 10.0,
                          0.15*time)));
        }

        // calculate nearly exactly same noise as vein noise, but a tiny bit off for specular highlight of vein
        vec2 hh = vec2(p.x+0.002, p.y-0.002);
        float rhh = sqrt( dot(hh,hh) );
        float ahh = atan( hh.y, hh.x );
        float veinnoise2 = 0.3;
        xx = rhh;
        yy = ahh;
        for (float level = 1.0; level < 3.0; level ++)
        {
              veinnoise2 = veinnoise2 + ((cos(time*0.25)*0.15 + 1.0) * 10.0 * level)
                  * abs(inoise(
                      vec3(level * xx * 15.0,
                          level * yy * 10.0,
                          0.15*time)));
        }



        vec3 sclera = vec3(0.9, 0.9, 0.9);
        vec3 color = vec3(0,0,0);
        float f = 1.0;
        if ( r < 0.85 ) {
          f = smoothstep( 0.842, 0.85, r);
          color = sclera;
          color = mix(color, vec3(0), f);

          // veins
          f = max(0.0, 1.0 - veinnoise);
          color = mix(color, vec3(1,0,0), 0.25*f);

          // specular highlight of vein
          f = max(0.0, 1.0 - veinnoise2);
          color = mix(color, vec3(1), f);

          // dull edges to black
          f = smoothstep( 0.45, 1.0, r);
          color = mix(color, vec3(0), f);

          // scelera texture
          f = rednoise;
          color = mix(color, vec3(0.10,0,0), 0.5*f);
        }
        if ( r < 0.39 ) {
          // base:
          vec3 blue = vec3(0.1,0.15,0.24);

          f = 1.0 - smoothstep( 0.36, 0.37, r);
          color = mix (color, blue, f);

          // background noise of iris
          if (r < 0.34) {
            color = mix (color, vec3(0.2, 0.2, 0.7), noiseCoef);
          }

          // secondary iris colour
          f = 1.0 - smoothstep( 0.0, 0.32, r);
          color = mix(color, vec3(1.0,0.4,0.2), 2.0*f*noiseCoef );

          // spindels
          f = fbm( vec3(12.0*r,15.0*a, slowtime * 4.0) );
          color = mix(color, vec3(1.0), f);

          // spindels
          a = slowtime*fbm(20.0*vec3(p.xy,1.0));
          f = fbm( vec3(20.0*r,23.0*a, slowtime * 4.0) );
          color = mix(color, vec3(1.0), f);

          // pupil
          float step = smoothstep(0.13,0.14,r);
          step = smoothstep(0.13 - slowtime*noiseCoef,0.14,r);  // creepy shit with this line on
          color *= step;
        }
        // specular highlight
        f = 1.0 - smoothstep( 0.0, 0.125, length(p - vec2(-0.2, 0.23)));
        color += vec3(1.0,0.9,0.8)*f;
        gl_FragColor = vec4(color.xyz, 1);
      }
  </script>
  <script id="perlin.vert" type="x-shader/x-vertex">
      attribute vec3 aVertexPosition;
      attribute vec2 aTextureCoord;

      uniform mat4 uMVMatrix;
      uniform mat4 uPMatrix;

      varying vec2 vTextureCoord;
      void main(void) {
          gl_Position = vec4(aVertexPosition, 1.0);
          vTextureCoord = aTextureCoord;
      }
  </script>
  <script type="text/javascript">
    window.requestAnimFrame = (function() {
      return window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {
              window.setTimeout(callback, 1000/60);
            };
    })();

    var gl;
    var canvas;
    var shaderProgram;
    var p_perm;
    var p_gradient;
    var permutation = new Uint8Array([151,160,137,91,90,15,
      131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
      190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
      88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
      77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
      102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
      135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
      5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
      223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
      129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
      251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
      49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
      138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180]);

    function initGL(canvas) {
      try {
        gl = canvas.getContext("experimental-webgl");
        gl.viewportWidth = canvas.width;
        gl.viewportHeight = canvas.height;
      } catch (e) {
        return -1;
      }
    }

    function getShader(gl, id) {
      var shaderScript = document.getElementById(id);
      if (!shaderScript) {
        return null;
      }

      var str = "";
      var k = shaderScript.firstChild;
      while (k) {
        if (k.nodeType == 3) {
          str += k.textContent;
        }
        k = k.nextSibling;
      }

      var shader;
      if (shaderScript.type == "x-shader/x-fragment") {
        shader = gl.createShader(gl.FRAGMENT_SHADER);
      } else if (shaderScript.type == "x-shader/x-vertex") {
        shader = gl.createShader(gl.VERTEX_SHADER);
      } else {
        return null;
      }

      gl.shaderSource(shader, str);
      gl.compileShader(shader);

      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        alert(gl.getShaderInfoLog(shader));
        return null;
      }

      return shader;
    }

    function initShaders() {
      var fragmentShader = getShader(gl, "perlin.frag");
      var vertexShader = getShader(gl, "perlin.vert");

      shaderProgram = gl.createProgram();
      gl.attachShader(shaderProgram, vertexShader);
      gl.attachShader(shaderProgram, fragmentShader);
      gl.linkProgram(shaderProgram);

      if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
          alert("Could not initialise shaders");
      }

      gl.useProgram(shaderProgram);

      shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
      gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

      shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram, "aTextureCoord");
      gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);

      shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
      shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
      shaderProgram.perm_sampler = gl.getUniformLocation(shaderProgram, "uperm_sampler");
      shaderProgram.grad_sampler = gl.getUniformLocation(shaderProgram, "igrad_sampler");
      shaderProgram.time = gl.getUniformLocation(shaderProgram, "time");
      shaderProgram.resX = gl.getUniformLocation(shaderProgram, "resX");
      shaderProgram.resY = gl.getUniformLocation(shaderProgram, "resY");
    }


    function handleLoadedTexture(texture) {
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.bindTexture(gl.TEXTURE_2D, null);
    }




    function initTexture() {
      p_perm = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, p_perm);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, 256, 1, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, permutation);
      var g = new Uint8Array([1,1,0,    -1,1,0,    1,-1,0,    -1,-1,0,
                              1,0,1,    -1,0,1,    1,0,-1,    -1,0,-1,
                              0,1,1,    0,-1,1,    0,1,-1,    0,-1,-1,
                              1,1,0,    0,-1,1,    -1,1,0,    0,-1,-1]);
      p_gradient = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, p_gradient);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 16, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, g);
    }

    var cubeVertexPositionBuffer;
    var cubeVertexTextureCoordBuffer;
    var cubeVertexIndexBuffer;

    function initBuffers() {
      cubeVertexPositionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
      vertices = [
          // Back face
          -1.0, -1.0, -1.0,
          -1.0,  1.0, -1.0,
          1.0,  1.0, -1.0,
          1.0, -1.0, -1.0,
      ];
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
      cubeVertexPositionBuffer.itemSize = 3;
      cubeVertexPositionBuffer.numItems = 4;

      cubeVertexTextureCoordBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexTextureCoordBuffer);
      var textureCoords = [
        // Back face
        1.0, 0.0,
        1.0, 1.0,
        0.0, 1.0,
        0.0, 0.0,
      ];
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
      cubeVertexTextureCoordBuffer.itemSize = 2;
      cubeVertexTextureCoordBuffer.numItems = 4;

      cubeVertexIndexBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
      var cubeVertexIndices = [
          0, 1, 2,      0, 2, 3,    // Back face
      ];
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
      cubeVertexIndexBuffer.itemSize = 1;
      cubeVertexIndexBuffer.numItems = 6;
    }

    function resizeCanvas() {
      canvas.height = canvas.clientHeight;
      canvas.width = canvas.clientWidth;
    }

    function drawScene() {
      resizeCanvas();
      gl.viewportWidth = canvas.width;
      gl.viewportHeight = canvas.height;

      gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexTextureCoordBuffer);
      gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, cubeVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);

      gl.activeTexture(gl.TEXTURE0);
      gl.bindTexture(gl.TEXTURE_2D, p_perm);
      gl.uniform1i(shaderProgram.perm_sampler, 0);
      gl.activeTexture(gl.TEXTURE1);
      gl.bindTexture(gl.TEXTURE_2D, p_gradient);
      gl.uniform1i(shaderProgram.grad_sampler, 1);

      gl.uniform1f(shaderProgram.time, TICK);
      gl.uniform1f(shaderProgram.resX, canvas.width);
      gl.uniform1f(shaderProgram.resY, canvas.height);

      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
      gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
    }

    var TICK = 0.0;
    function tick() {
      requestAnimFrame(tick);
      if (window.scrollY > 500) {
        TICK = 0;
        return;
      }
      drawScene();
      TICK += 0.02;
    }

    function webGLStart() {
      initGL(canvas);
      initShaders();
      initBuffers();
      initTexture();
      gl.clearColor(0.0, 0.0, 0.0, 1.0);
      tick();
    }

    document.addEventListener("DOMContentLoaded", function(event) {
      canvas = document.getElementById("c");
      gl = canvas.getContext("experimental-webgl");
      gl.viewportWidth = canvas.width;
      gl.viewportHeight = canvas.height;
      webGLStart();
    });
  </script>
</head>
