<!DOCTYPE html>
<html>
  <%- include('../_head', {
    section: 'main',
    title: 'WebGL Background Bump Mapping'
  }) %>
  <body>
    <div class='content'>
      <%- include('../_header', {
        section: 'none'
      }) %>
      <section id='main'>
        <canvas height='256' id='c' width='256'></canvas>
        <article class='readable-section'>
          <section>
            <div id='texture_source' style='width: 25%; height: 25%; float: left; margin: 0 2em 2em 0;'>
              <h4>Source Image</h4>
              <img id='texture_example'>
              <input id='texture_src' placeholder='Enter a URL for a background texture'>
            </div>
            <h1>WebGL Background Bump Mapping</h1>
            <p>
              <a href='#' id='hide'>Hide text</a>
            </p>
            <h3>Overview</h3>
            <p>The website's background <code>(0,0)x(viewportX,viewportY)</code> is mapped to a square <code>(-1,-1)x(1,1)</code>.  Right about where your face is, a virtual light is pointed towards the screen.  In practice, it seems that hanging this light from <code>0..2</code> units above the screen yields good results.  At 2 units, the light provides a fairly even coverage of the square.  Less than this, it seems to provide for an easy vignette effect.  You provide a background (diffuse) color, and your image is consulted for the texture of the surface.</p>
            <p>I do not recommend rolling this out to a prodution site.  Furthermore, I have not made it easy to roll out, for 2 reasons:<p>
            <ul>
              <li>I accomplished what I set out to do, and</li>
              <li>on slow computers, it might make things unmanageable. Perhaps some framerate detection and animation cancelling is in order?</li>
            </ul>
            <p>Subtle tiling textures care of
              <a class='iconal' href='http://subtlepatterns.com/' target='_blank'>
                subtlepatterns.com
                <i class='fa fa-external-link'></i>
              </a>
            </p>
            <h3>Graphics Model</h3>
            <p>The image is represented in the XY plane.  The normal is simply (0,0,1).  This allows us to easily place the light somewhere in the (0,0,+z) area, and use the mouse to control the X and Y positions of the light.  The Phong reflection model is used for shading.  The specular component is messed up, as you'll see if you increase rho.  Since the viewport is defined to be between (-1,-1)x(1,1), we can easily reason about the position of the light in this space.  (-1,-1) being the bottom right, (1,1) being the top right.  An offset can be applied to the mouse's modifier, allowing us to position the light off-screen but still have the mouse affect the shading; this can make the effect subtler.</p>
            <h3>Bump mapping</h3>
            <p>Forward differencing (via 3 texture lookups) in X (1,0,0) and Y (0,1,0) is performed on the provided pattern, and a magnitude is obtained.  The stepsize can be controlled by delta_s and delta_t, and may need to be adjusted as the texture is scaled for better results.  Currently, only the blue channel is consulted.  This magnitude, modulated by a user specified scaling factor (bump_scale), is used to perturb the normals in the X and Y directions (or s and t).</p>
            <h3>Viewport Adjustments</h3>
            <p>It is very rare that a browser will have a viewport aspect ratio of 1:1.  The canvas is stretched to the browser viewport dimensions, but internally has a square of aspect 1:1.  As such, we'd notice stretching on any textures due to this aspect ratio difference.  So, on draw/resize, the texture coordinates are modulated by the browser's viewport aspect ratio.  This results in square textures displaying as they were intended.</p>
            <h3>WebGL and non-POT textures</h3>
            <p>As I was experimenting with the textures, I noticed that a lot of the tiling textures that exist in the wild are non-power-of-two (non-POT) in dimension.  Furthermore, almost none of the textures are perfectly square.</p>
            <p>WebGL only currently supports power-of-two pixel dimensions, so the image is redrawn using a temporary 2D canvas if it isn't POT.  This is fine for getting the texture to simply display, but there are still rescaling problems (mapping an arbitrary rectangle into a perfect square squashes the texture).  Ultimately, this is due to a deficiency in the simplified model I constructed, but it is easily circumvented: the texture coordinates are further modulated by the texture's aspect ratio.  This results in textures of any aspect ratios rendering as the author intended.</p>
            <h3>Texture Coordinate Scaling</h3>
            <p>As the dimensions of the images used for textures vary, so must their scaling factor -- some of the patterns you may try might be outright invisible due to their scaling factor.  This is also performed with a straight-forward multiplication to the texture coordinates; gl.REPEAT in the texture wrap parameters handles the rest.</p>
            <p>All texture coordinate modulations are done via vertex shader uniforms, rather than modulating and re-uploading the texture coordinates.  This was done to keep the implementation simple.  Since there are only two triangles, I don't anticipate this as being particularly inefficient.</p>
            <h3>Limitations & Concerns</h3>
            <p>The light is less circular the further away the window viewport is from 1:1.  Smart semi-automatic setting of texture coordinate scale and bump scale would be nice, but for now it is a manual tweaking process.</p>
            <p>The code is a mess, and I couldn't figure out why the specular was failing in Linux.  The lighting model isn't terribly standard since there's no actual geometry, so I imagine this could be contributing to my frustrations.  Could be what I thought was working specular in Windows was actually just silently failing.  I've disabled specular and as far as I can see, it looks how it always looked in Windows.</p>
          </section>
        </article>
        <% include ../_footer %>
      </section>
      <div class='scripts'>
        <script src='https://code.jquery.com/jquery-2.1.4.min.js' type='text/javascript'></script>
        <style type="text/css">
            #c {
                position:fixed;
                z-index:0;
                top:0;
            }
            .dg span {
            	color:#2fa1d6 !important;
            }
            .dg.ac {
                z-index:10000;
            }
        </style>
        <script type="text/javascript" src="../js/dat.gui.min.js"></script>
        <% include _bump-shaders %>
        <script type="text/javascript">
        $(document).ready(function(){
            var Controls = function(){
                this.light_z = 0.5;
                this.mouse_x = 0.0;
                this.mouse_y = 0.0;
                this.offset_x = 0.01;
                this.offset_y = 0.01;
                this.rho = 0;
                this.bump_scale = 29.9;
                this.delta_s = 0.005;
                this.delta_t = 0.005;
                this.texture_coord_scale = 4.2;
                this.diffuse = [64,67,76,255]; // CSS string
                this.pattern = '45degreee_fabric';
                this.texture_aspect = 1; // not all textures are square, so we need to have a way to accomodate for that
                this.texture_diffuse_rgba = [this.diffuse[0]/255.0, this.diffuse[1]/255.0, this.diffuse[2]/255.0, this.diffuse[3]/255.0]; // save the shader acceptable rgba here to avoid recomputation
            };
            var gui = new dat.GUI({
         /*       load: {
                    "preset": "Dem Bumps",
                    "remembered": {
                        "Dem Bumps" : {
                            "0" : {
                                "pattern" : "flowers",
                                "light_z" : 0.35,
                                "offset_x" : 0,
                                "offset_y" : 0,
                                "rho" : 2,
                                "bump_scale" : 40,
                                "delta_s" : 0.005,
                                "delta_t" : 0.005,
                                "texture_coord_scale" : 4.2,
                                "diffuse": [64,67,76,255]
                            }
                        }
                    }
                }*/
            });
            var gui_data = new Controls();
            //gui.remember(gui_data);
            gui.add(gui_data, "light_z", 0, 2);
            gui.add(gui_data, "offset_x", -2.0, 2.0);
            gui.add(gui_data, "offset_y", -2.0, 2.0);
            gui.add(gui_data, "rho", 0.0, 150.0);
            gui.add(gui_data, "bump_scale", 0, 100);
            gui.add(gui_data, "delta_s", 0, 0.1);
            gui.add(gui_data, "delta_t", 0, 0.1);
            gui.add(gui_data, "texture_coord_scale", 1, 40);
            gui.add(gui_data, 'pattern', [
                'always_grey',
                'black_scales',
                'crissXcross',
                'flowers',
                'hixs_pattern_evolution',
                'leather_1',
                'light_honeycomb',
                'mirrored_squares',
                'paven',
                'pool_table',
                'px_by_Gre3g',
                'random_grey_variations',
                'rip_jobs',
                'soft_circle_scales',
                'starring',
                'struckaxiom',
                'type',
                'washi',
                'wood_1',
                'wood_pattern',
                'woven',
                'xv'
                 ]).onChange(function(value)
                {
                    var src = '../img/subtlepatterns/' + value + '.min.png';
                    textureSrc(src);
                });
            gui.addColor(gui_data, 'diffuse').onChange(function(value){
                // memoize the rgba 0..255 > 0..1 conversion here.
                gui_data.texture_diffuse_rgba[0] = value[0]/255.0;
                gui_data.texture_diffuse_rgba[1] = value[1]/255.0;
                gui_data.texture_diffuse_rgba[2] = value[2]/255.0;
                gui_data.texture_diffuse_rgba[3] = value[3]/255.0;

            });

            // shim layer with setTimeout fallback
            window.requestAnimFrame = (function(){
              return  window.requestAnimationFrame       ||
                      window.webkitRequestAnimationFrame ||
                      window.mozRequestAnimationFrame    ||
                      window.oRequestAnimationFrame      ||
                      window.msRequestAnimationFrame     ||
                      function( callback ){
                        window.setTimeout(callback, 1000 / 60);
                      };
            })();
        	var drawing_quad = {}, paused = false, mouse_position = {x:0, y:0};
            var canvas = document.getElementById("c");
            function getShader(gl, id) {
                var shaderScript = document.getElementById(id);
                if (!shaderScript) {
                    return null;
                }

                var str = "";
                var k = shaderScript.firstChild;
                while (k) {
                    if (k.nodeType == 3) {
                        str += k.textContent;
                    }
                    k = k.nextSibling;
                }

                var shader;
                if (shaderScript.type == "x-shader/x-fragment") {
                    shader = gl.createShader(gl.FRAGMENT_SHADER);
                } else if (shaderScript.type == "x-shader/x-vertex") {
                    shader = gl.createShader(gl.VERTEX_SHADER);
                } else {
                    return null;
                }

                gl.shaderSource(shader, str);
                gl.compileShader(shader);

                if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                    console.log(gl.getShaderInfoLog(shader));
                    return null;
                }

                return shader;
            }
            function initShaders() {
                var fragmentShader = getShader(gl, "bg.frag");
                var vertexShader = getShader(gl, "bg.vert");

                shaderProgram = gl.createProgram();
                gl.attachShader(shaderProgram, vertexShader);
                gl.attachShader(shaderProgram, fragmentShader);
                gl.linkProgram(shaderProgram);

                if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
                    alert("Could not initialise shaders");
                }

                gl.useProgram(shaderProgram);

                shaderProgram.aVertexPosition = gl.getAttribLocation(shaderProgram, "aVertexPosition");
                gl.enableVertexAttribArray(shaderProgram.aVertexPosition);

                shaderProgram.aTextureCoord = gl.getAttribLocation(shaderProgram, "aTextureCoord");
                gl.enableVertexAttribArray(shaderProgram.aTextureCoord);

                shaderProgram.background_sampler = gl.getUniformLocation(shaderProgram, "background_sampler");
                shaderProgram.mouseX = gl.getUniformLocation(shaderProgram, "mouseX");
                shaderProgram.mouseY = gl.getUniformLocation(shaderProgram, "mouseY");
                shaderProgram.light_z = gl.getUniformLocation(shaderProgram, "light_z");
                shaderProgram.rho = gl.getUniformLocation(shaderProgram, "rho");
                shaderProgram.bump_scale = gl.getUniformLocation(shaderProgram, "bump_scale");
                shaderProgram.delta_s = gl.getUniformLocation(shaderProgram, "delta_s");
                shaderProgram.delta_t = gl.getUniformLocation(shaderProgram, "delta_t");
                shaderProgram.viewport_aspect = gl.getUniformLocation(shaderProgram, "viewport_aspect");
                shaderProgram.texture_aspect = gl.getUniformLocation(shaderProgram, "texture_aspect");
                shaderProgram.texture_coord_scale = gl.getUniformLocation(shaderProgram, "texture_coord_scale");
                shaderProgram.diffuse_material = gl.getUniformLocation(shaderProgram, "diffuse_material");
            }
        	function initBuffers() {
        	    drawing_quad.vertices = gl.createBuffer();
        	    gl.bindBuffer(gl.ARRAY_BUFFER, drawing_quad.vertices);
        	    var vertices = [
        	        // Back face
        	        -1.0, -1.0, 0.0,
        	        -1.0,  1.0, 0.0,
        	         1.0,  1.0, 0.0,
        	         1.0, -1.0, 0.0,
        	    ];
        	    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        	    drawing_quad.vertices.itemSize = 3;
        	    drawing_quad.vertices.numItems = 4;

        	    drawing_quad.texture_coords = gl.createBuffer();
        	    gl.bindBuffer(gl.ARRAY_BUFFER, drawing_quad.texture_coords);
        	    var textureCoords = [
        	      // Back face
        	      -1.0, 0.0,
        	      -1.0, 1.0,
        	      0.0, 1.0,
        	      0.0, 0.0,
        	    ];
        	    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
        	    drawing_quad.texture_coords.itemSize = 2;
        	    drawing_quad.texture_coords.numItems = 4;

        	    drawing_quad.indices = gl.createBuffer();
        	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, drawing_quad.indices);
        	    var cubeVertexIndices = [
        	        0, 1, 2,      0, 2, 3,    // Back face
        	    ];
        	    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
        	    drawing_quad.indices.itemSize = 1;
        	    drawing_quad.indices.numItems = 6;
        	}
            function isPowerOfTwo(x) { // http://www.khronos.org/webgl/wiki/WebGL_and_OpenGL_Differences#Non-Power_of_Two_Texture_Support
                return (x & (x - 1)) == 0;
            }

            function nextHighestPowerOfTwo(x) { // http://www.khronos.org/webgl/wiki/WebGL_and_OpenGL_Differences#Non-Power_of_Two_Texture_Support
                --x;
                for (var i = 1; i < 32; i <<= 1) {
                    x = x | x >> i;
                }
                return x + 1;
            }
        	function handleLoadedTexture(texture) {
        	    gl.bindTexture(gl.TEXTURE_2D, texture);
                gui_data.texture_aspect = texture.image.height / texture.image.width; // calculate aspect ratio of pre-POT-converted image
                if (!isPowerOfTwo(texture.image.width) || !isPowerOfTwo(texture.image.height)) {
                    // Scale up the texture to the next highest power of two dimensions.
                    var temp_canvas = document.createElement("canvas");
                    temp_canvas.width = nextHighestPowerOfTwo(texture.image.width);
                    temp_canvas.height = nextHighestPowerOfTwo(texture.image.height);
                    var ctx = temp_canvas.getContext("2d");
                    ctx.drawImage(texture.image, 0, 0, temp_canvas.width, temp_canvas.height);
                    texture.image = temp_canvas;
                }

        	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
        	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
        	    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
        	    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
                gl.generateMipmap(gl.TEXTURE_2D);
                gl.bindTexture(gl.TEXTURE_2D, null);
        	}
            function initGL(canvas) {
                try {
                    gl = canvas.getContext("experimental-webgl");
                    gl.viewportWidth = canvas.width;
                    gl.viewportHeight = canvas.height;
                } catch (e) {
                	console.log(e);
                }
                if (!gl) {
                    $("#status").html("Could not initialise WebGL, sorry :-(");
                }
                else {
                    $("#status").html("WebGL seems to have loaded correctly.  <a id='hide'>Hide this text, let me play with the background.</a>");
                }
            }
        	function drawScene() {

                // calculate viewport aspect:
                var viewport_aspect = canvas.width / canvas.height;

        	    gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        	    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        	    gl.bindBuffer(gl.ARRAY_BUFFER, drawing_quad.vertices);
        	    gl.vertexAttribPointer(shaderProgram.aVertexPosition, drawing_quad.vertices.itemSize, gl.FLOAT, false, 0, 0);

        	    gl.bindBuffer(gl.ARRAY_BUFFER, drawing_quad.texture_coords);
        	    gl.vertexAttribPointer(shaderProgram.aTextureCoord, drawing_quad.texture_coords.itemSize, gl.FLOAT, false, 0, 0);

        	    gl.activeTexture(gl.TEXTURE0);
        	    gl.bindTexture(gl.TEXTURE_2D, drawing_quad.texture);
        	    gl.uniform1i(shaderProgram.background_sampler, 0);
        	    gl.uniform1f(shaderProgram.mouseX, gui_data.mouse_x);
        	    gl.uniform1f(shaderProgram.mouseY, gui_data.mouse_y);
                gl.uniform1f(shaderProgram.light_z, gui_data.light_z);
                gl.uniform1f(shaderProgram.rho, gui_data.rho);
                gl.uniform1f(shaderProgram.bump_scale, gui_data.bump_scale);
                gl.uniform1f(shaderProgram.delta_s, gui_data.delta_s);
                gl.uniform1f(shaderProgram.delta_t, gui_data.delta_t);
                gl.uniform1f(shaderProgram.texture_coord_scale, gui_data.texture_coord_scale);
                gl.uniform1f(shaderProgram.viewport_aspect, viewport_aspect);
                gl.uniform4f(shaderProgram.diffuse_material, gui_data.texture_diffuse_rgba[0], gui_data.texture_diffuse_rgba[1], gui_data.texture_diffuse_rgba[2], gui_data.texture_diffuse_rgba[3]);
                gl.uniform1f(shaderProgram.texture_aspect, gui_data.texture_aspect);

        	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, drawing_quad.indices);
        	    gl.drawElements(gl.TRIANGLES, drawing_quad.indices.numItems, gl.UNSIGNED_SHORT, 0);
        	}
            function textureSrc(src)
            {
                if (drawing_quad.texture) // if it exists, delete old one
                {
                    gl.deleteTexture(drawing_quad.texture);
                }
                drawing_quad.texture = gl.createTexture();
                drawing_quad.texture.image = new Image();
                drawing_quad.texture.image.onload = function () {
                    handleLoadedTexture(drawing_quad.texture)
                }
                drawing_quad.texture.image.src = src;
                $("#texture_example").attr("src",src);
                $("#texture_src").val(src);
            }

            function webGLStart() {
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
                initGL(canvas);
                initShaders();
                initBuffers();
                textureSrc("../img/subtlepatterns/flowers.min.png");

                gl.clearColor(0.5, 0.5, 0.5, 1.0);
                gl.enable(gl.DEPTH_TEST);
                drawScene();
            }
            $("#texture_src").blur(function(){
                var newsrc = $(this).val();
                textureSrc(newsrc);
            });
        	webGLStart();
        	function animate(t) {
        		if (!paused) {
        		  last = t;
        		  drawScene();
        		}
        		window.requestAnimFrame(animate, canvas);
        	};
        	animate(new Date().getTime());

        	document.onmousemove = function(e)
        	{
        		ev = e || window.event;
        		gui_data.mouse_x = (((ev.pageX - window.pageXOffset) / window.innerWidth)-0.5)+gui_data.offset_x;
        		gui_data.mouse_y = -(((ev.pageY - window.pageYOffset) / window.innerHeight)-0.5)+gui_data.offset_y;
        	};
            $(window).resize(function(){
                canvas.height = window.innerHeight;
                canvas.width = window.innerWidth;
                try {
                    gl = canvas.getContext("experimental-webgl");
                    gl.viewportWidth = canvas.width;
                    gl.viewportHeight = canvas.height;
                } catch (e) {
                    console.log(e);
                }
            });
            $("#hide").on("click", function () {
            	$(".readable-section, .bottom-footer").fadeOut();
            });
        });

        </script>
      </div>
    </div>
  </body>
</html>
